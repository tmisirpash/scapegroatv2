/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface GroatGameInterface extends utils.Interface {
  functions: {
    "depositEth()": FunctionFragment;
    "entryCounter()": FunctionFragment;
    "gameMarker()": FunctionFragment;
    "globalAddresses(uint128)": FunctionFragment;
    "globalEntries(uint128)": FunctionFragment;
    "groat()": FunctionFragment;
    "maxPlayers()": FunctionFragment;
    "payout()": FunctionFragment;
    "playerEntries(uint128)": FunctionFragment;
    "playerQueues(address)": FunctionFragment;
    "q()": FunctionFragment;
    "queueSize()": FunctionFragment;
    "removeEntries(uint128)": FunctionFragment;
    "revealBlockNumber()": FunctionFragment;
    "stake()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "depositEth"
      | "entryCounter"
      | "gameMarker"
      | "globalAddresses"
      | "globalEntries"
      | "groat"
      | "maxPlayers"
      | "payout"
      | "playerEntries"
      | "playerQueues"
      | "q"
      | "queueSize"
      | "removeEntries"
      | "revealBlockNumber"
      | "stake"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "depositEth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "entryCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gameMarker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalAddresses",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "globalEntries",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "groat", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "payout", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playerEntries",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "playerQueues",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "q", values?: undefined): string;
  encodeFunctionData(functionFragment: "queueSize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeEntries",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "revealBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stake", values?: undefined): string;

  decodeFunctionResult(functionFragment: "depositEth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "entryCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gameMarker", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "globalAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalEntries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "groat", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxPlayers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payout", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerEntries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playerQueues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "q", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "queueSize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeEntries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;

  events: {};
}

export interface GroatGame extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GroatGameInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    depositEth(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    entryCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    gameMarker(overrides?: CallOverrides): Promise<[BigNumber]>;

    globalAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    globalEntries(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { prev: BigNumber; next: BigNumber }>;

    groat(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxPlayers(overrides?: CallOverrides): Promise<[BigNumber]>;

    payout(overrides?: CallOverrides): Promise<[BigNumber]>;

    playerEntries(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { prev: BigNumber; next: BigNumber }>;

    playerQueues(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { head: BigNumber; tail: BigNumber }>;

    q(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { head: BigNumber; tail: BigNumber }>;

    queueSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeEntries(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revealBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    stake(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  depositEth(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  entryCounter(overrides?: CallOverrides): Promise<BigNumber>;

  gameMarker(overrides?: CallOverrides): Promise<BigNumber>;

  globalAddresses(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  globalEntries(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { prev: BigNumber; next: BigNumber }>;

  groat(overrides?: CallOverrides): Promise<BigNumber>;

  maxPlayers(overrides?: CallOverrides): Promise<BigNumber>;

  payout(overrides?: CallOverrides): Promise<BigNumber>;

  playerEntries(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { prev: BigNumber; next: BigNumber }>;

  playerQueues(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { head: BigNumber; tail: BigNumber }>;

  q(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { head: BigNumber; tail: BigNumber }>;

  queueSize(overrides?: CallOverrides): Promise<BigNumber>;

  removeEntries(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revealBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  stake(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    depositEth(overrides?: CallOverrides): Promise<void>;

    entryCounter(overrides?: CallOverrides): Promise<BigNumber>;

    gameMarker(overrides?: CallOverrides): Promise<BigNumber>;

    globalAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    globalEntries(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { prev: BigNumber; next: BigNumber }>;

    groat(overrides?: CallOverrides): Promise<BigNumber>;

    maxPlayers(overrides?: CallOverrides): Promise<BigNumber>;

    payout(overrides?: CallOverrides): Promise<BigNumber>;

    playerEntries(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { prev: BigNumber; next: BigNumber }>;

    playerQueues(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { head: BigNumber; tail: BigNumber }>;

    q(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { head: BigNumber; tail: BigNumber }>;

    queueSize(overrides?: CallOverrides): Promise<BigNumber>;

    removeEntries(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revealBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    stake(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    depositEth(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    entryCounter(overrides?: CallOverrides): Promise<BigNumber>;

    gameMarker(overrides?: CallOverrides): Promise<BigNumber>;

    globalAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalEntries(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    groat(overrides?: CallOverrides): Promise<BigNumber>;

    maxPlayers(overrides?: CallOverrides): Promise<BigNumber>;

    payout(overrides?: CallOverrides): Promise<BigNumber>;

    playerEntries(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    playerQueues(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    q(overrides?: CallOverrides): Promise<BigNumber>;

    queueSize(overrides?: CallOverrides): Promise<BigNumber>;

    removeEntries(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revealBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    stake(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    depositEth(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    entryCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gameMarker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    globalAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalEntries(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    groat(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxPlayers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payout(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    playerEntries(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    playerQueues(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    q(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queueSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeEntries(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revealBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stake(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
