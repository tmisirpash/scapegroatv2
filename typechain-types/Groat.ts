/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface GroatInterface extends utils.Interface {
  functions: {
    "depositEth(bool)": FunctionFragment;
    "groatIndex()": FunctionFragment;
    "maxPlayers()": FunctionFragment;
    "payout()": FunctionFragment;
    "queue(uint8)": FunctionFragment;
    "queuePtr()": FunctionFragment;
    "removeEntries(uint8)": FunctionFragment;
    "revealBlockNumber()": FunctionFragment;
    "stake()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "depositEth"
      | "groatIndex"
      | "maxPlayers"
      | "payout"
      | "queue"
      | "queuePtr"
      | "removeEntries"
      | "revealBlockNumber"
      | "stake"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "depositEth",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "groatIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "payout", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "queue",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "queuePtr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeEntries",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "revealBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stake", values?: undefined): string;

  decodeFunctionResult(functionFragment: "depositEth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "groatIndex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxPlayers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payout", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "queue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "queuePtr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeEntries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;

  events: {
    "Groated(address,uint8)": EventFragment;
    "Join(uint8)": EventFragment;
    "Leave(uint8)": EventFragment;
    "Winner(address,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Groated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Join"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Leave"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Winner"): EventFragment;
}

export interface GroatedEventObject {
  arg0: string;
  arg1: number;
}
export type GroatedEvent = TypedEvent<[string, number], GroatedEventObject>;

export type GroatedEventFilter = TypedEventFilter<GroatedEvent>;

export interface JoinEventObject {
  arg0: number;
}
export type JoinEvent = TypedEvent<[number], JoinEventObject>;

export type JoinEventFilter = TypedEventFilter<JoinEvent>;

export interface LeaveEventObject {
  arg0: number;
}
export type LeaveEvent = TypedEvent<[number], LeaveEventObject>;

export type LeaveEventFilter = TypedEventFilter<LeaveEvent>;

export interface WinnerEventObject {
  arg0: string;
  arg1: number;
}
export type WinnerEvent = TypedEvent<[string, number], WinnerEventObject>;

export type WinnerEventFilter = TypedEventFilter<WinnerEvent>;

export interface Groat extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GroatInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    depositEth(
      partialFulfill: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    groatIndex(overrides?: CallOverrides): Promise<[number]>;

    maxPlayers(overrides?: CallOverrides): Promise<[number]>;

    payout(overrides?: CallOverrides): Promise<[BigNumber]>;

    queue(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    queuePtr(overrides?: CallOverrides): Promise<[number]>;

    removeEntries(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revealBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    stake(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  depositEth(
    partialFulfill: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  groatIndex(overrides?: CallOverrides): Promise<number>;

  maxPlayers(overrides?: CallOverrides): Promise<number>;

  payout(overrides?: CallOverrides): Promise<BigNumber>;

  queue(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  queuePtr(overrides?: CallOverrides): Promise<number>;

  removeEntries(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revealBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  stake(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    depositEth(
      partialFulfill: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    groatIndex(overrides?: CallOverrides): Promise<number>;

    maxPlayers(overrides?: CallOverrides): Promise<number>;

    payout(overrides?: CallOverrides): Promise<BigNumber>;

    queue(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    queuePtr(overrides?: CallOverrides): Promise<number>;

    removeEntries(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    revealBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    stake(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Groated(address,uint8)"(arg0?: null, arg1?: null): GroatedEventFilter;
    Groated(arg0?: null, arg1?: null): GroatedEventFilter;

    "Join(uint8)"(arg0?: null): JoinEventFilter;
    Join(arg0?: null): JoinEventFilter;

    "Leave(uint8)"(arg0?: null): LeaveEventFilter;
    Leave(arg0?: null): LeaveEventFilter;

    "Winner(address,uint8)"(arg0?: null, arg1?: null): WinnerEventFilter;
    Winner(arg0?: null, arg1?: null): WinnerEventFilter;
  };

  estimateGas: {
    depositEth(
      partialFulfill: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    groatIndex(overrides?: CallOverrides): Promise<BigNumber>;

    maxPlayers(overrides?: CallOverrides): Promise<BigNumber>;

    payout(overrides?: CallOverrides): Promise<BigNumber>;

    queue(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queuePtr(overrides?: CallOverrides): Promise<BigNumber>;

    removeEntries(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revealBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    stake(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    depositEth(
      partialFulfill: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    groatIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxPlayers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payout(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queue(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queuePtr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeEntries(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revealBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stake(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
